# import User, Request, Offer from "./generated/prisma.graphql"
# import Request, Seller, Friendship from "./generated/prisma.graphql"

# import Query.sellers from "./generated/prisma.graphql"
# import Query.offers from "./generated/prisma.graphql"
# import Query.users from "./generated/prisma.graphql"
# import Query.offersConnection from "./generated/prisma.graphql"

# import Mutation.deleteFriendship from "./generated/prisma.graphql"
# import Mutation.updateFriendship from "./generated/prisma.graphql"
# import Mutation.createFriendship from "./generated/prisma.graphql"

# import Mutation.createOffer from "./generated/prisma.graphql"
# import Mutation.updateOffer from "./generated/prisma.graphql"
# import Mutation.deleteOffer from "./generated/prisma.graphql"

# import Mutation.createRequest from "./generated/prisma.graphql"
# import Mutation.updateRequest from "./generated/prisma.graphql"
# import Mutation.deleteRequest from "./generated/prisma.graphql"

# import Mutation.createSeller from "./generated/prisma.graphql"
# import Mutation.updateSeller from "./generated/prisma.graphql"
# import Mutation.deleteSeller from "./generated/prisma.graphql"

# import Mutation.createUser from "./generated/prisma.graphql"
# import Mutation.updateUser from "./generated/prisma.graphql"
# import Mutation.deleteUser from "./generated/prisma.graphql"


type Query {
  me: User
}

type RefreshTokenPayload {
  token: String!
  userId: String!
}

type Mutation {
  refreshToken: RefreshTokenPayload!
  signup(about: String!, email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): LoginResponse!
}

type AuthPayload {
  token: String!
  user: User!
}

type LoginResponse {
  payload: AuthPayload
  error: Error
}

type Error {
  field: String!
  msg: String!
}
